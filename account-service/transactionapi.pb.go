// Code generated by protoc-gen-go.
// source: transactionapi.proto
// DO NOT EDIT!

/*
Package transactionapi is a generated protocol buffer package.

It is generated from these files:
	transactionapi.proto

It has these top-level messages:
	Transaction
	TransactionReply
	TransactionRequest
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Transaction struct {
	Name   string  `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Id     uint32  `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	From   uint32  `protobuf:"varint,3,opt,name=from" json:"from,omitempty"`
	To     uint32  `protobuf:"varint,4,opt,name=to" json:"to,omitempty"`
	Amount float64 `protobuf:"fixed64,5,opt,name=amount" json:"amount,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Transaction) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Transaction) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Transaction) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *Transaction) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *Transaction) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type TransactionReply struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *TransactionReply) Reset()                    { *m = TransactionReply{} }
func (m *TransactionReply) String() string            { return proto.CompactTextString(m) }
func (*TransactionReply) ProtoMessage()               {}
func (*TransactionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TransactionReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type TransactionRequest struct {
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TransactionRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*Transaction)(nil), "transactionapi.Transaction")
	proto.RegisterType((*TransactionReply)(nil), "transactionapi.TransactionReply")
	proto.RegisterType((*TransactionRequest)(nil), "transactionapi.TransactionRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TransactionApi service

type TransactionApiClient interface {
	CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionReply, error)
	GetTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type transactionApiClient struct {
	cc *grpc.ClientConn
}

func NewTransactionApiClient(cc *grpc.ClientConn) TransactionApiClient {
	return &transactionApiClient{cc}
}

func (c *transactionApiClient) CreateTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionReply, error) {
	out := new(TransactionReply)
	err := grpc.Invoke(ctx, "/transactionapi.TransactionApi/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionApiClient) GetTransaction(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/transactionapi.TransactionApi/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TransactionApi service

type TransactionApiServer interface {
	CreateTransaction(context.Context, *Transaction) (*TransactionReply, error)
	GetTransaction(context.Context, *TransactionRequest) (*Transaction, error)
}

func RegisterTransactionApiServer(s *grpc.Server, srv TransactionApiServer) {
	s.RegisterService(&_TransactionApi_serviceDesc, srv)
}

func _TransactionApi_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionApiServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionapi.TransactionApi/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionApiServer).CreateTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionApi_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionApiServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/transactionapi.TransactionApi/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionApiServer).GetTransaction(ctx, req.(*TransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionApi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "transactionapi.TransactionApi",
	HandlerType: (*TransactionApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _TransactionApi_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionApi_GetTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transactionapi.proto",
}

func init() { proto.RegisterFile("transactionapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4e, 0x03, 0x21,
	0x10, 0xc6, 0xcb, 0x5a, 0xab, 0x8e, 0x91, 0xe8, 0xc4, 0x18, 0x52, 0x2f, 0x84, 0x78, 0xd8, 0x83,
	0xe9, 0x41, 0x9f, 0xc0, 0x78, 0xf0, 0x8e, 0x7d, 0x01, 0xdc, 0x62, 0x42, 0x22, 0x7f, 0x84, 0xd9,
	0x83, 0xcf, 0xe6, 0xcb, 0x99, 0x62, 0x1b, 0xa9, 0x87, 0xbd, 0xcd, 0x7c, 0xf3, 0x83, 0xef, 0x83,
	0x81, 0x6b, 0xca, 0x26, 0x14, 0x33, 0x90, 0x8b, 0xc1, 0x24, 0xb7, 0x4a, 0x39, 0x52, 0x44, 0x7e,
	0xa8, 0x2a, 0x0f, 0xe7, 0xeb, 0x3f, 0x05, 0x11, 0xe6, 0xc1, 0x78, 0x2b, 0x98, 0x64, 0xfd, 0x99,
	0xae, 0x35, 0x72, 0xe8, 0xdc, 0x46, 0x74, 0x92, 0xf5, 0x17, 0xba, 0x73, 0x9b, 0x2d, 0xf3, 0x9e,
	0xa3, 0x17, 0x47, 0x55, 0xa9, 0xf5, 0x96, 0xa1, 0x28, 0xe6, 0xbf, 0x0c, 0x45, 0xbc, 0x81, 0x85,
	0xf1, 0x71, 0x0c, 0x24, 0x8e, 0x25, 0xeb, 0x99, 0xde, 0x75, 0xea, 0x1e, 0x2e, 0x1b, 0x3b, 0x6d,
	0xd3, 0xc7, 0x17, 0x0a, 0x38, 0x29, 0xe3, 0x30, 0xd8, 0x52, 0xaa, 0xed, 0xa9, 0xde, 0xb7, 0xea,
	0x0e, 0xf0, 0x80, 0xfe, 0x1c, 0x6d, 0xa1, 0x5d, 0x1e, 0xb6, 0xcf, 0xf3, 0xf0, 0xcd, 0x80, 0x37,
	0xd8, 0x53, 0x72, 0xb8, 0x86, 0xab, 0xe7, 0x6c, 0x0d, 0xd9, 0xf6, 0x6d, 0xb7, 0xab, 0x7f, 0x3f,
	0xd2, 0x0c, 0x97, 0x72, 0x62, 0x58, 0x63, 0xaa, 0x19, 0xbe, 0x02, 0x7f, 0xb1, 0xd4, 0x5e, 0xa9,
	0x26, 0x4f, 0xd5, 0xb8, 0xcb, 0x29, 0x5b, 0x35, 0x7b, 0x5b, 0xd4, 0xbd, 0x3c, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x9a, 0xb1, 0x91, 0xc3, 0xaf, 0x01, 0x00, 0x00,
}
